
-- /**
--  * insurance_companies table
--  */

-- DROP TABLE IF EXISTS insurance_companies CASCADE;
-- CREATE TABLE insurance_companies (
--   id int PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
--   name text UNIQUE NOT NULL
-- );

-- ALTER TABLE insurance_companies OWNER TO postgres;
-- ALTER TABLE insurance_companies ENABLE ROW LEVEL SECURITY;

-- CREATE POLICY "Admins can view data." ON public.insurance_companies
--   FOR SELECT
--   TO authenticated
--   USING (is_admin(auth.uid()));

-- CREATE POLICY "Admins can insert data." ON public.insurance_companies
--   FOR INSERT
--   TO authenticated
--   WITH CHECK (is_admin(auth.uid()));

-- CREATE POLICY "Admins can update data." ON public.insurance_companies
--   FOR UPDATE
--   TO authenticated
--   USING (is_admin(auth.uid()));

-- CREATE POLICY "Admins can delete data." ON public.insurance_companies
--   FOR DELETE
--   TO authenticated
--   USING (is_admin(auth.uid()));





-- /**
--  * insurance_policies table
--  */

-- DROP TABLE IF EXISTS insurance_policies CASCADE;
-- CREATE TABLE insurance_policies (
--   id int PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
--   user_id uuid REFERENCES public.users(id) ON DELETE CASCADE NOT NULL,
--   company_id int REFERENCES insurance_companies(id) NOT NULL,
--   name text NOT NULL
-- );

-- ALTER TABLE insurance_policies OWNER TO postgres;
-- ALTER TABLE insurance_policies ENABLE ROW LEVEL SECURITY;

-- CREATE POLICY "Admin can view insurance_policies data" ON public.insurance_policies
--   FOR SELECT
--   TO authenticated
--   USING (is_admin(auth.uid()));

-- CREATE POLICY "Admin can insert insurance_policies" ON public.insurance_policies
--   FOR INSERT
--   TO authenticated
--   WITH CHECK (is_admin(auth.uid()));

-- CREATE POLICY "Admin can update insurance_policies data" ON public.insurance_policies
--   FOR UPDATE
--   TO authenticated
--   USING (is_admin(auth.uid()));

-- CREATE POLICY "Admin can delete insurance_policies" ON public.insurance_policies
--   FOR DELETE
--   TO authenticated
--   USING (is_admin(auth.uid()));





-- /**
--  * insurance_policy_rows table
--  */

-- DROP TABLE IF EXISTS insurance_policy_rows CASCADE;
-- CREATE TABLE insurance_policy_rows (
--   id int PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
--   policy_id int REFERENCES insurance_policies(id) ON DELETE CASCADE NOT NULL,
--   year smallint NOT NULL,
--   premium int NOT NULL DEFAULT 0,
--   loan_interest_rate numeric(5,2) NOT NULL DEFAULT 45, -- divide by 100 -> 4.5%
--   age_end_year smallint NOT NULL,
--   net_cash_value_end_year int NOT NULL,
--   net_death_benefit_end_year int NOT NULL,
--   annual_net_outlay int NOT NULL DEFAULT 0,
--   cumulative_net_outlay int NOT NULL DEFAULT 0,
--   net_annual_cash_value_increase int NOT NULL DEFAULT 0
-- );

-- ALTER TABLE insurance_policy_rows OWNER TO postgres;
-- ALTER TABLE insurance_policy_rows ENABLE ROW LEVEL SECURITY;

-- CREATE POLICY "Admin can view insurance_policy_rows data" ON public.insurance_policy_rows
--   FOR SELECT
--   TO authenticated
--   USING (is_admin(auth.uid()));

-- CREATE POLICY "Admin can insert insurance_policy_rows" ON public.insurance_policy_rows
--   FOR INSERT
--   TO authenticated
--   WITH CHECK (is_admin(auth.uid()));

-- CREATE POLICY "Admin can update insurance_policy_rows data" ON public.insurance_policy_rows
--   FOR UPDATE
--   TO authenticated
--   USING (is_admin(auth.uid()));

-- CREATE POLICY "Admin can delete insurance_policy_rows" ON public.insurance_policy_rows
--   FOR DELETE
--   TO authenticated
--   USING (is_admin(auth.uid()));



-- /**
--  *
--  * Insurance Policy Functions
--  *
--  */

-- -- Retrieves the policies and combines the user and company for viewing in the policies page
-- CREATE OR REPLACE FUNCTION get_all_user_insurance_policy_views()
-- RETURNS SETOF jsonb
-- AS $$
-- BEGIN
--   RETURN QUERY
--   SELECT jsonb_build_object(
--     'user', jsonb_build_object(
--       'id', u.id,
--       'name', u.name
--     ),
--     'policy', jsonb_build_object(
--       'id', ip.id,
--       'name', ip.name
--     ),
--     'company', jsonb_build_object(
--       'id', ic.id,
--       'name', ic.name
--     )
--   )
--   FROM users AS u
--   INNER JOIN insurance_policies AS ip ON u.id = ip.user_id
--   INNER JOIN insurance_companies AS ic ON ip.company_id = ic.id
--   ORDER BY ip.id;
-- END;
-- $$ LANGUAGE plpgsql SECURITY definer;

-- ALTER FUNCTION get_all_user_insurance_policy_views() OWNER TO postgres;

-- -- Creates the new policy then, with the new policy id, inserts all the rows for that policy
-- CREATE OR REPLACE FUNCTION create_insurance_policy(
--   p_user_id uuid,
--   p_company_id int,
--   p_name text,
--   p_policy_rows insurance_policy_rows[] -- Array of insurance_policy_rows
-- ) RETURNS void AS $$
-- DECLARE
--   my_policy_id int;
--   p_row insurance_policy_rows;
--   default_premium numeric(12,2);
-- BEGIN
--   -- Get the premium_deposit value from the user's personal_finance table
--   SELECT premium_deposit INTO default_premium FROM personal_finance WHERE user_id = p_user_id;

--   -- Insert into insurance_policies table and get the generated id
--   INSERT INTO insurance_policies (user_id, company_id, name)
--   VALUES (p_user_id, p_company_id, p_name)
--   RETURNING id INTO my_policy_id;

--   -- Loop through the array and insert rows into insurance_policy_rows table
--   FOREACH p_row IN ARRAY p_policy_rows LOOP
--     INSERT INTO insurance_policy_rows (
--       policy_id,
--       year,
--       premium,
--       loan_interest_rate,
--       age_end_year,
--       net_cash_value_end_year,
--       net_death_benefit_end_year,
--       annual_net_outlay,
--       cumulative_net_outlay,
--       net_annual_cash_value_increase
--     )
--     VALUES (
--       my_policy_id,
--       p_row.year,
--       COALESCE(p_row.premium, default_premium),
--       COALESCE(p_row.loan_interest_rate, 45), -- Use default value of 45 if p_row.loan_interest_rate is null
--       p_row.age_end_year,
--       p_row.net_cash_value_end_year,
--       p_row.net_death_benefit_end_year,
--       p_row.annual_net_outlay,
--       p_row.cumulative_net_outlay,
--       p_row.net_annual_cash_value_increase
--     );
--   END LOOP;
-- END;
-- $$ LANGUAGE plpgsql SECURITY definer;

-- ALTER FUNCTION create_insurance_policy(p_user_id uuid, p_company_id int, p_name text, p_policy_rows insurance_policy_rows[]) OWNER TO postgres;
